cd() {
  if ! builtin cd 2>/dev/null $@; then
    echo "cannot cd: $@$reset_color"
    return
  fi
  if [ "$?" -eq 0 ]; then
    lscdmax=40
    nfiles=$(/bin/ls|wc -l)
    if [ $nfiles -eq 0 ]; then
      if [ "$(/bin/ls -A|wc -l)" -eq 0 ]; then
        echo "no files in: $(pwd)$reset_color"
      else
        echo "only hidden files in: $(pwd)$reset_color"
        ls -A --color=auto
      fi
    elif [ $lscdmax -ge $nfiles ]; then
      ls -F --color=auto
    else
      echo "$nfiles files in: $(pwd)$reset_color"
    fi
  fi
}

# colorize less
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

alias ls='ls -F --color=auto'
alias ll='ls -Flh --color=auto'
alias la='ls -Flha --color=auto'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias mv='mv -i'
alias rm='rm -i'
alias cp='cp -i'
alias quit='exit'
alias J='cd -'
alias H='cd ~'
alias ..='cd ..'
alias ..='cd ..'
alias ...='cd ...'
alias ....='cd ....'
alias diff='colordiff'
alias mktmp='mkdir t'
exists vim && alias v='vim'
exists nvim && alias v='nvim'
exists nvim && alias agit='nvim +Agit'
exists w3m && alias w3m='w3m -O ja_JP.UTF-8'
exists gsed && alias sed='gsed'
exists tmux && alias tmux="tmux -2"
exists git && alias g='git'
exists docker-compose && alias dcc='docker-compose'

if exists kubectl ; then
    alias k='kubectl'
    alias kx='kubectl exec -it'
    alias kang='kubectl apply -f https://k8s.io/examples/controllers/nginx-deployment.yaml'
    complete -F __start_kubectl k
    source <(kubectl completion bash)
    export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
fi

# fzf
[ -f ~/.fzf.bash ] && . ~/.fzf.bash
export FZF_DEFAULT_OPTS='--height 80% --reverse --border'

__fzf_git__() {
    name=$(ghq list -p | fzf --preview 'tree -C {} | head -200')
    if [ ! -z $name ]; then
        history -s "cd $name"
        cd $name
    fi
}

__fzf_cd__() {
    toplevel=$(git rev-parse --show-toplevel 2>/dev/null)
    if [ -z ${toplevel} ]; then
        echo "error: this is not a git repository"
    else
        root_directory=$(realpath --relative-to=. ${toplevel}) &&
        directories=$(fd . --type d --full-path ${root_directory}) &&
        selected_dir=$(printf "${root_directory}\n${directories}" | fzf -m --preview 'tree -C {} | head -200') &&
        history -s "cd $selected_dir" &&
        cd $selected_dir
    fi
}

__fzf_file__() {
    toplevel=$(git rev-parse --show-toplevel 2>/dev/null)
    if [ -z ${toplevel} ]; then
        echo "error: this is not a git repository"
    else
        files=$(git ls-files ${toplevel}) &&
            selected_file=$(echo "$files" | fzf -m --preview 'head -200 {}') &&
            history -s "${EDITOR} $selected_file" &&
            ${EDITOR} $selected_file
    fi
}

bind -r "\C-g"
bind -r "\C-j"
bind -r "\C-o"
bind -x '"\C-g": __fzf_git__'
bind -x '"\C-j": __fzf_cd__'
bind -x '"\C-o": __fzf_file__'

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

